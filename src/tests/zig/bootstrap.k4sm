!region {bootloader} @ 0x100000 > 0x100000
!region {kernel} @ 0xffff800000200000 > 0x200000
!include "src/tests/zig/bootloader.bc" @ {bootloader}
!include "src/tests/zig/kernel_bootstrap.k4sm" @ {kernel}
!include "src/tests/zig/kernel.bc" @ {kernel}
!ent %_start @ {bootloader}

%_start
    mov i64 sp $0x400000
    mov i64 bp sp
    call i64 %bootloader_main
    hlt
    und

%bootloader_bc_boot_write_pt
    mov i64 pt rg
    add i64 sp $8 ; pop return addr of %write_pt
    or i64 sp $0xffff800000000000
    enpt i64 %start_high
    ret ; this doesn't actually happen, but it makes the assembler happy lmao

; %llvm_dbg_value
;     ret

; %llvm_dbg_declare
;     ret

; %llvm_returnaddress
;     mov i64 ra r0
;     ret

; %llvm_usub_with_overflow_i64
;     mov i64 ra rg
;     sub i64 ra rh
;     ret

; %llvm_uadd_with_overflow_i64
;     mov i64 ra rg
;     add i64 ra rh
;     ret

; %llvm_umul_with_overflow_i64
;     mov i64 ra rg
;     mul i64 ra rh
;     ret

; %llvm_usub_with_overflow_i8
;     mov i8 ra rg
;     sub i8 ra rh
;     ret

; %llvm_uadd_with_overflow_i32
;     mov i32 ra rg
;     add i32 ra rh
;     ret

; %llvm_memcpy_p0i8_p0i8_i64
;     push i64 bp
;     push i64 rb
;     push i64 rd
;     push i64 rc
;     mov i64 rb rg ; dest
;     mov i64 rd rh ; src
;     ; ri = len
;     mov i64 rc $0
; %llvm_memcpy_p0i8_p0i8_i64_loop
;     cmp i64 rc ri
;     jeq i64 %llvm_memcpy_p0i8_p0i8_i64_end
;     mov i8 [rb] [rd]
;     add i64 rc r1
;     add i64 rb r1
;     add i64 rd r1
;     jmp i64 %llvm_memcpy_p0i8_p0i8_i64_loop
; %llvm_memcpy_p0i8_p0i8_i64_end
;     pop i64 rc
;     pop i64 rd
;     pop i64 rb
;     pop i64 bp
;     ret

%bootloader_bc_llvm_memset_p0i8_i64
    push i64 bp
    push i64 rb
    push i64 rc
    mov i64 rb rg ; dest
    ; ri = len
    mov i64 rc $0
%bootloader_bc_llvm_memset_p0i8_i64_loop
    cmp i64 rc ri
    jeq i64 %bootloader_bc_llvm_memset_p0i8_i64_end
    mov i8 [rb] rh
    add i64 rc r1
    add i64 rb r1
    jmp i64 %bootloader_bc_llvm_memset_p0i8_i64_loop
%bootloader_bc_llvm_memset_p0i8_i64_end
    pop i64 rc
    pop i64 rb
    pop i64 bp
    ret

; %llvm_assume
;     cmp i8 rg $0
;     jne i64 %llvm_assume_passed
;     und
; %llvm_assume_passed
;     ret

; %llvm_lifetime_start_p0i8
;     ret

; %llvm_lifetime_end_p0i8
;     ret

%bootloader_bc_boot_printi
    printi i64 rg
    ret

%bootloader_bc_boot_printc
    printc i8 rg
    ret

%bootloader_bc_boot_hlt
    hlt
    und

%bootloader_bc_boot_und
    und
    ret