@global_1 align8 resb 0
@global_1_elem0 align8 (0+@global_0)
@global_1_elem1 align8 $24
@global_2 align8 "\x43\x72\x65\x61\x74\x69\x6e\x67\x20\x70\x61\x67\x65\x20\x74\x61\x62\x6c\x65\x20\x61\x74\x3a\x00"
@global_5 align8 resb 0
@global_5_elem0 align8 (0+@global_4)
@global_5_elem1 align8 $16
@global_0 align8 "\x50\x68\x79\x73\x69\x63\x61\x6c\x20\x6d\x65\x6d\x6f\x72\x79\x20\x73\x69\x7a\x65\x20\x69\x73\x3a\x00"
@global_3 align8 resb 0
@global_3_elem0 align8 (0+@global_2)
@global_3_elem1 align8 $23
@global_4 align8 "\x45\x6e\x61\x62\x6c\x69\x6e\x67\x20\x70\x61\x67\x69\x6e\x67\x2e\x00"
%PageTable_1__init
    push i64 bp
    mov i64 bp sp
    sub i64 sp $56
    mov i64 [-8+bp] rg
    mov i64 [-16+bp] rh
    jmp i64 %PageTable_1__init_Entry
%PageTable_1__init_Entry
;
;%2 = bitcast %PageTable(1)* %0 to [512 x %Frame]**
    mov i64 [-24+bp] [-8+bp]
;
;%3 = bitcast %Frame* %1 to i64*
    mov i64 [-32+bp] [-16+bp]
;
;%4 = load i64* %3, align 1
    mov i64 rc [-32+bp]
    mov i64 [-40+bp] [rc]
;
;%5 = and i64 %4, i64 4503599627366400
    mov i64 [-48+bp] [-40+bp]
    and i64 [-48+bp] $4503599627366400
;
;%6 = inttoptr i64 %5 to [512 x %Frame]*
    mov i64 [-56+bp] [-48+bp]
;
;store [512 x %Frame]* %6, [512 x %Frame]** %2, align 1
    mov i64 rc [-24+bp]
    mov i64 [rc] [-56+bp]
    mov i64 rb %PageTable_1__init_Entry
;ret void
    jmp i64 %PageTable_1__init_ret
%PageTable_1__init_ret
    mov i64 sp bp
    pop i64 bp
    ret 

%map_to
    push i64 bp
    mov i64 bp sp
    sub i64 sp $288
    mov i64 [-8+bp] rg
    mov i64 [-16+bp] rh
    mov i64 [-24+bp] ri
    mov i64 [-32+bp] rj
    jmp i64 %map_to_Entry
%map_to_Entry
;
;%pt3 = alloca %PageTable(3), align 1
    mov i64 [-48+bp] bp
    sub i64 [-48+bp] $40
;
;%pt2 = alloca %PageTable(2), align 1
    mov i64 [-64+bp] bp
    sub i64 [-64+bp] $56
;
;%pt1 = alloca %PageTable(1), align 8
    mov i64 [-80+bp] bp
    sub i64 [-80+bp] $72
;
;%4 = bitcast %VirtAddr* %1 to i64*
    mov i64 [-88+bp] [-16+bp]
;
;%5 = load i64* %4, align 8
    mov i64 rc [-88+bp]
    mov i64 [-96+bp] [rc]
;
;%6 = lshr i64 %5, i64 39
    mov i64 [-104+bp] [-96+bp]
    shr i64 [-104+bp] $39
;
;%7 = and i64 %6, i64 511
    mov i64 [-112+bp] [-104+bp]
    and i64 [-112+bp] $511
;
;call @PageTable(4).next_table_create(%PageTable(3)* %pt3, %PageTable(4)* %0, i64 %7, %FrameAllocator* %3)
    mov i64 rg [-48+bp]
    mov i64 rh [-8+bp]
    mov i64 ri [-112+bp]
    mov i64 rj [-32+bp]
    call i64 %PageTable_4__next_table_create
;
;%8 = load i64* %4, align 8
    mov i64 rc [-88+bp]
    mov i64 [-120+bp] [rc]
;
;%9 = lshr i64 %8, i64 30
    mov i64 [-128+bp] [-120+bp]
    shr i64 [-128+bp] $30
;
;%10 = and i64 %9, i64 511
    mov i64 [-136+bp] [-128+bp]
    and i64 [-136+bp] $511
;
;call @PageTable(3).next_table_create(%PageTable(2)* %pt2, %PageTable(3)* %pt3, i64 %10, %FrameAllocator* %3)
    mov i64 rg [-64+bp]
    mov i64 rh [-48+bp]
    mov i64 ri [-136+bp]
    mov i64 rj [-32+bp]
    call i64 %PageTable_3__next_table_create
;
;%11 = load i64* %4, align 8
    mov i64 rc [-88+bp]
    mov i64 [-144+bp] [rc]
;
;%12 = lshr i64 %11, i64 21
    mov i64 [-152+bp] [-144+bp]
    shr i64 [-152+bp] $21
;
;%13 = and i64 %12, i64 511
    mov i64 [-160+bp] [-152+bp]
    and i64 [-160+bp] $511
;
;call @PageTable(2).next_table_create(%PageTable(1)* %pt1, %PageTable(2)* %pt2, i64 %13, %FrameAllocator* %3)
    mov i64 rg [-80+bp]
    mov i64 rh [-64+bp]
    mov i64 ri [-160+bp]
    mov i64 rj [-32+bp]
    call i64 %PageTable_2__next_table_create
;
;%14 = bitcast %PageTable(1)* %pt1 to [512 x %Frame]**
    mov i64 [-168+bp] [-80+bp]
;
;%15 = load i64* %4, align 8
    mov i64 rc [-88+bp]
    mov i64 [-176+bp] [rc]
;
;%16 = lshr i64 %15, i64 12
    mov i64 [-184+bp] [-176+bp]
    shr i64 [-184+bp] $12
;
;%17 = and i64 %16, i64 511
    mov i64 [-192+bp] [-184+bp]
    and i64 [-192+bp] $511
;
;%18 = load [512 x %Frame]** %14, align 8
    mov i64 rc [-168+bp]
    mov i64 [-200+bp] [rc]
;
;%19 = bitcast %Frame* %2 to i64*
    mov i64 [-208+bp] [-24+bp]
;
;%20 = getelementptr inbounds [512 x %Frame]* %18, i64 0, i64 %17, i32 0
    mov i64 [-216+bp] [-200+bp]
    mov i64 rc [-192+bp]
    mul i64 rc $8
    add i64 [-216+bp] rc
    mov i64 [-224+bp] [-216+bp]
;
;%21 = load i64* %19, align 1
    mov i64 rc [-208+bp]
    mov i64 [-232+bp] [rc]
;
;store i64 %21, i64* %20, align 1
    mov i64 rc [-224+bp]
    mov i64 [rc] [-232+bp]
;
;%22 = load i64* %4, align 8
    mov i64 rc [-88+bp]
    mov i64 [-240+bp] [rc]
;
;%23 = lshr i64 %22, i64 12
    mov i64 [-248+bp] [-240+bp]
    shr i64 [-248+bp] $12
;
;%24 = and i64 %23, i64 511
    mov i64 [-256+bp] [-248+bp]
    and i64 [-256+bp] $511
;
;%25 = getelementptr inbounds [512 x %Frame]* %18, i64 0, i64 %24, i32 0
    mov i64 [-264+bp] [-200+bp]
    mov i64 rc [-256+bp]
    mul i64 rc $8
    add i64 [-264+bp] rc
    mov i64 [-272+bp] [-264+bp]
;
;%26 = load i64* %25, align 1
    mov i64 rc [-272+bp]
    mov i64 [-280+bp] [rc]
;
;%27 = or i64 %26, i64 1
    mov i64 [-288+bp] [-280+bp]
    or i64 [-288+bp] $1
;
;store i64 %27, i64* %25, align 1
    mov i64 rc [-272+bp]
    mov i64 [rc] [-288+bp]
    mov i64 rb %map_to_Entry
;ret void
    jmp i64 %map_to_ret
%map_to_ret
    mov i64 sp bp
    pop i64 bp
    ret 

%FrameAllocator_alloc
    push i64 bp
    mov i64 bp sp
    sub i64 sp $32
    mov i64 [-8+bp] rg
    jmp i64 %FrameAllocator_alloc_Entry
%FrameAllocator_alloc_Entry
;
;%1 = bitcast %FrameAllocator* %0 to i64*
    mov i64 [-16+bp] [-8+bp]
;
;%2 = load i64* %1, align 8
    mov i64 rc [-16+bp]
    mov i64 [-24+bp] [rc]
;
;%3 = add i64 %2, i64 4096
    mov i64 [-32+bp] [-24+bp]
    add i64 [-32+bp] $4096
;
;store i64 %3, i64* %1, align 8
    mov i64 rc [-16+bp]
    mov i64 [rc] [-32+bp]
    mov i64 rb %FrameAllocator_alloc_Entry
;ret i64 %2
    mov i64 ra [-24+bp]
    jmp i64 %FrameAllocator_alloc_ret
%FrameAllocator_alloc_ret
    mov i64 sp bp
    pop i64 bp
    ret 

%kernel_main
    push i64 bp
    mov i64 bp sp
    sub i64 sp $0
    jmp i64 %kernel_main_Entry
%kernel_main_Entry
;
;tail call @printi(i64 42069)
    mov i64 rg $42069
    call i64 %printi
;
;tail call @hlt()
    call i64 %hlt
    mov i64 rb %kernel_main_Entry
;unreachable
    und 
%kernel_main_ret
    mov i64 sp bp
    pop i64 bp
    ret 

%PageTable_3__next_table_create
    push i64 bp
    mov i64 bp sp
    sub i64 sp $184
    mov i64 [-8+bp] rg
    mov i64 [-16+bp] rh
    mov i64 [-24+bp] ri
    mov i64 [-32+bp] rj
    jmp i64 %PageTable_3__next_table_create_Entry
%PageTable_3__next_table_create_Entry
;
;%4 = alloca %?PageTable(2), align 8
    mov i64 [-56+bp] bp
    sub i64 [-56+bp] $48
;
;%frame = alloca i64, align 8
    mov i64 [-72+bp] bp
    sub i64 [-72+bp] $64
;
;call @PageTable(3).next_table(%?PageTable(2)* %4, %PageTable(3)* %1, i64 %2)
    mov i64 rg [-56+bp]
    mov i64 rh [-16+bp]
    mov i64 ri [-24+bp]
    call i64 %PageTable_3__next_table
;
;%5 = getelementptr inbounds %?PageTable(2)* %4, i64 0, i32 1
    mov i64 [-80+bp] [-56+bp]
    add i64 [-80+bp] $8
    mov i64 [-88+bp] [-80+bp]
;
;%6 = load i1* %5, align 8
    mov i64 rc [-88+bp]
    mov i8 [-96+bp] [rc]
    mov i64 rb %PageTable_3__next_table_create_Entry
;br i1 %6, label %OptionalNonNull, label %OptionalNull
    cmp i8 [-96+bp] $0
    jne i64 %PageTable_3__next_table_create_OptionalNonNull
    jmp i64 %PageTable_3__next_table_create_OptionalNull
    und 
%PageTable_3__next_table_create_common_ret
    mov i64 rb %PageTable_3__next_table_create_common_ret
;ret void
    jmp i64 %PageTable_3__next_table_create_ret
%PageTable_3__next_table_create_OptionalNull
;
;%tmpcast = bitcast i64* %frame to %Frame*
    mov i64 [-104+bp] [-72+bp]
;
;%7 = tail call @FrameAllocator.alloc(%FrameAllocator* %3)
    mov i64 rg [-32+bp]
    call i64 %FrameAllocator_alloc
    mov i64 [-112+bp] ra
;
;%8 = or i64 %7, i64 1
    mov i64 [-120+bp] [-112+bp]
    or i64 [-120+bp] $1
;
;store i64 %8, i64* %frame, align 8
    mov i64 rc [-72+bp]
    mov i64 [rc] [-120+bp]
;
;%9 = bitcast %PageTable(3)* %1 to [512 x %Frame]**
    mov i64 [-128+bp] [-16+bp]
;
;%10 = load [512 x %Frame]** %9, align 1
    mov i64 rc [-128+bp]
    mov i64 [-136+bp] [rc]
;
;%11 = getelementptr inbounds [512 x %Frame]* %10, i64 0, i64 %2, i32 0
    mov i64 [-144+bp] [-136+bp]
    mov i64 rc [-24+bp]
    mul i64 rc $8
    add i64 [-144+bp] rc
    mov i64 [-152+bp] [-144+bp]
;
;store i64 %8, i64* %11, align 1
    mov i64 rc [-152+bp]
    mov i64 [rc] [-120+bp]
;
;%12 = bitcast %PageTable(2)* %0 to %PageTable(1)*
    mov i64 [-160+bp] [-8+bp]
;
;call @PageTable(1).init(%PageTable(1)* %12, %Frame* %tmpcast)
    mov i64 rg [-160+bp]
    mov i64 rh [-104+bp]
    call i64 %PageTable_1__init
    mov i64 rb %PageTable_3__next_table_create_OptionalNull
;br label %common.ret
    jmp i64 %PageTable_3__next_table_create_common_ret
%PageTable_3__next_table_create_OptionalNonNull
;
;%13 = bitcast %?PageTable(2)* %4 to i64*
    mov i64 [-168+bp] [-56+bp]
;
;%14 = bitcast %PageTable(2)* %0 to i64*
    mov i64 [-176+bp] [-8+bp]
;
;%15 = load i64* %13, align 8
    mov i64 rc [-168+bp]
    mov i64 [-184+bp] [rc]
;
;store i64 %15, i64* %14, align 1
    mov i64 rc [-176+bp]
    mov i64 [rc] [-184+bp]
    mov i64 rb %PageTable_3__next_table_create_OptionalNonNull
;br label %common.ret
    jmp i64 %PageTable_3__next_table_create_common_ret
%PageTable_3__next_table_create_ret
    mov i64 sp bp
    pop i64 bp
    ret 

%PageTable_3__next_table
    push i64 bp
    mov i64 bp sp
    sub i64 sp $120
    mov i64 [-8+bp] rg
    mov i64 [-16+bp] rh
    mov i64 [-24+bp] ri
    jmp i64 %PageTable_3__next_table_Entry
%PageTable_3__next_table_Entry
;
;%3 = bitcast %PageTable(3)* %1 to [512 x %Frame]**
    mov i64 [-32+bp] [-16+bp]
;
;%4 = load [512 x %Frame]** %3, align 1
    mov i64 rc [-32+bp]
    mov i64 [-40+bp] [rc]
;
;%5 = getelementptr inbounds [512 x %Frame]* %4, i64 0, i64 %2
    mov i64 [-48+bp] [-40+bp]
    mov i64 rc [-24+bp]
    mul i64 rc $8
    add i64 [-48+bp] rc
    mov i64 [-56+bp] [-48+bp]
;
;%6 = bitcast %Frame* %5 to i64*
    mov i64 [-64+bp] [-56+bp]
;
;%7 = load i64* %6, align 1
    mov i64 rc [-64+bp]
    mov i64 [-72+bp] [rc]
;
;%8 = and i64 %7, i64 1
    mov i64 [-80+bp] [-72+bp]
    and i64 [-80+bp] $1
;
;%.not = icmp eq i64 %8, i64 0
    cmp i64 [-80+bp] $0
    jeq i64 %PageTable_3__next_table_cmp_jeq_10000007_true
    jmp i64 %PageTable_3__next_table_cmp_jeq_10000007_false
%PageTable_3__next_table_cmp_jeq_10000007_true
    mov i8 [-88+bp] r1
    jmp i64 %PageTable_3__next_table_cmp_jeq_10000007_end
%PageTable_3__next_table_cmp_jeq_10000007_false
    mov i8 [-88+bp] r0
    jmp i64 %PageTable_3__next_table_cmp_jeq_10000007_end
%PageTable_3__next_table_cmp_jeq_10000007_end
    mov i64 rb %PageTable_3__next_table_Entry
;br i1 %.not, label %Else, label %Then
    cmp i8 [-88+bp] $0
    jne i64 %PageTable_3__next_table_Else
    jmp i64 %PageTable_3__next_table_Then
    und 
%PageTable_3__next_table_common_ret
    mov i64 rb %PageTable_3__next_table_common_ret
;ret void
    jmp i64 %PageTable_3__next_table_ret
%PageTable_3__next_table_Then
;
;%9 = getelementptr inbounds %?PageTable(2)* %0, i64 0, i32 1
    mov i64 [-96+bp] [-8+bp]
    add i64 [-96+bp] $8
    mov i64 [-104+bp] [-96+bp]
;
;store i1 true, i1* %9, align 1
    mov i64 rc [-104+bp]
    mov i8 [rc] $1
;
;%10 = bitcast %?PageTable(2)* %0 to %PageTable(1)*
    mov i64 [-112+bp] [-8+bp]
;
;tail call @PageTable(1).init(%PageTable(1)* %10, %Frame* %5)
    mov i64 rg [-112+bp]
    mov i64 rh [-56+bp]
    call i64 %PageTable_1__init
;
;store i1 true, i1* %9, align 1
    mov i64 rc [-104+bp]
    mov i8 [rc] $1
    mov i64 rb %PageTable_3__next_table_Then
;br label %common.ret
    jmp i64 %PageTable_3__next_table_common_ret
%PageTable_3__next_table_Else
;
;%11 = bitcast %?PageTable(2)* %0 to i8*
    mov i64 [-120+bp] [-8+bp]
;
;call @llvm.memset.p0i8.i64(i8* %11, i8 0, i64 9, i1 false)
    mov i64 rg [-120+bp]
    mov i8 rh $0
    mov i64 ri $9
    mov i8 rj $0
    call i64 %llvm_memset_p0i8_i64
    mov i64 rb %PageTable_3__next_table_Else
;br label %common.ret
    jmp i64 %PageTable_3__next_table_common_ret
%PageTable_3__next_table_ret
    mov i64 sp bp
    pop i64 bp
    ret 

%println
    push i64 bp
    mov i64 bp sp
    sub i64 sp $96
    mov i64 [-8+bp] rg
    jmp i64 %println_Entry
%println_Entry
;
;%1 = getelementptr inbounds %[]u8* %0, i64 0, i32 1
    mov i64 [-16+bp] [-8+bp]
    add i64 [-16+bp] $8
    mov i64 [-24+bp] [-16+bp]
;
;%2 = load i64* %1, align 8
    mov i64 rc [-24+bp]
    mov i64 [-32+bp] [rc]
    mov i64 rb %println_Entry
;br label %ForCond
    jmp i64 %println_ForCond
%println_ForCond
;
;%i.0 = phi i64 [ i64 0, %Entry ], [ i64 %6, %ForBody ]
    cmp i64 rb %println_Entry
    jeq i64 %println_phi_10000005_Entry
    cmp i64 rb %println_ForBody
    jeq i64 %println_phi_10000007_ForBody
    und 
%println_phi_10000005_Entry
    mov i64 [-40+bp] $0
    jmp i64 %println_phi_10000004_end
%println_phi_10000007_ForBody
    mov i64 [-40+bp] [-48+bp]
    jmp i64 %println_phi_10000004_end
%println_phi_10000004_end
;
;%exitcond.not = icmp eq i64 %2, i64 %i.0
    cmp i64 [-32+bp] [-40+bp]
    jeq i64 %println_cmp_jeq_10000008_true
    jmp i64 %println_cmp_jeq_10000008_false
%println_cmp_jeq_10000008_true
    mov i8 [-56+bp] r1
    jmp i64 %println_cmp_jeq_10000008_end
%println_cmp_jeq_10000008_false
    mov i8 [-56+bp] r0
    jmp i64 %println_cmp_jeq_10000008_end
%println_cmp_jeq_10000008_end
    mov i64 rb %println_ForCond
;br i1 %exitcond.not, label %ForEnd, label %ForBody
    cmp i8 [-56+bp] $0
    jne i64 %println_ForEnd
    jmp i64 %println_ForBody
    und 
%println_ForBody
;
;%3 = bitcast %[]u8* %0 to i8**
    mov i64 [-64+bp] [-8+bp]
;
;%4 = load i8** %3, align 8
    mov i64 rc [-64+bp]
    mov i64 [-72+bp] [rc]
;
;%scevgep = getelementptr i8* %4, i64 %i.0
    mov i64 [-80+bp] [-72+bp]
    mov i64 rc [-40+bp]
    mul i64 rc $1
    add i64 [-80+bp] rc
    mov i64 [-88+bp] [-80+bp]
;
;%5 = load i8* %scevgep, align 1
    mov i64 rc [-88+bp]
    mov i8 [-96+bp] [rc]
;
;tail call @printc(i8 %5)
    mov i8 rg [-96+bp]
    call i64 %printc
;
;%6 = add i64 %i.0, i64 1
    mov i64 [-48+bp] [-40+bp]
    add i64 [-48+bp] $1
    mov i64 rb %println_ForBody
;br label %ForCond
    jmp i64 %println_ForCond
%println_ForEnd
;
;tail call @printc(i8 10)
    mov i8 rg $10
    call i64 %printc
    mov i64 rb %println_ForEnd
;ret void
    jmp i64 %println_ret
%println_ret
    mov i64 sp bp
    pop i64 bp
    ret 

%bootloader_main
    push i64 bp
    mov i64 bp sp
    sub i64 sp $88
    mov i64 [-8+bp] rg
    jmp i64 %bootloader_main_Entry
%bootloader_main_Entry
;
;%frame_alloc = alloca %FrameAllocator, align 8
    mov i64 [-24+bp] bp
    sub i64 [-24+bp] $16
;
;%pt4_frame = alloca %Frame, align 8
    mov i64 [-40+bp] bp
    sub i64 [-40+bp] $32
;
;%page_table = alloca %PageTable(4), align 1
    mov i64 [-56+bp] bp
    sub i64 [-56+bp] $48
;
;tail call @println(%[]u8* @global_1)
    mov i64 rg @global_1
    call i64 %println
;
;tail call @printi(i64 %0)
    mov i64 rg [-8+bp]
    call i64 %printi
;
;tail call @println(%[]u8* @global_3)
    mov i64 rg @global_3
    call i64 %println
;
;%1 = bitcast %FrameAllocator* %frame_alloc to i64*
    mov i64 [-64+bp] [-24+bp]
;
;store i64 4096, i64* %1, align 8
    mov i64 rc [-64+bp]
    mov i64 [rc] $4096
;
;%2 = call @FrameAllocator.alloc(%FrameAllocator* %frame_alloc)
    mov i64 rg [-24+bp]
    call i64 %FrameAllocator_alloc
    mov i64 [-72+bp] ra
;
;%3 = bitcast %Frame* %pt4_frame to i64*
    mov i64 [-80+bp] [-40+bp]
;
;store i64 %2, i64* %3, align 8
    mov i64 rc [-80+bp]
    mov i64 [rc] [-72+bp]
;
;%4 = and i64 %2, i64 4503599627366400
    mov i64 [-88+bp] [-72+bp]
    and i64 [-88+bp] $4503599627366400
;
;tail call @printi(i64 %4)
    mov i64 rg [-88+bp]
    call i64 %printi
;
;call @setup_paging(%PageTable(4)* %page_table, %Frame* %pt4_frame, %FrameAllocator* %frame_alloc)
    mov i64 rg [-56+bp]
    mov i64 rh [-40+bp]
    mov i64 ri [-24+bp]
    call i64 %setup_paging
;
;tail call @println(%[]u8* @global_5)
    mov i64 rg @global_5
    call i64 %println
;
;tail call @write_pt(i64 %4)
    mov i64 rg [-88+bp]
    call i64 %write_pt
    mov i64 rb %bootloader_main_Entry
;unreachable
    und 
%bootloader_main_ret
    mov i64 sp bp
    pop i64 bp
    ret 

%PageTable_4__next_table_create
    push i64 bp
    mov i64 bp sp
    sub i64 sp $200
    mov i64 [-8+bp] rg
    mov i64 [-16+bp] rh
    mov i64 [-24+bp] ri
    mov i64 [-32+bp] rj
    jmp i64 %PageTable_4__next_table_create_Entry
%PageTable_4__next_table_create_Entry
;
;%4 = alloca %?PageTable(3), align 8
    mov i64 [-56+bp] bp
    sub i64 [-56+bp] $48
;
;%frame = alloca i64, align 8
    mov i64 [-72+bp] bp
    sub i64 [-72+bp] $64
;
;%5 = bitcast %?PageTable(3)* %4 to %?PageTable(2)*
    mov i64 [-80+bp] [-56+bp]
;
;%6 = bitcast %PageTable(4)* %1 to %PageTable(3)*
    mov i64 [-88+bp] [-16+bp]
;
;call @PageTable(3).next_table(%?PageTable(2)* %5, %PageTable(3)* %6, i64 %2)
    mov i64 rg [-80+bp]
    mov i64 rh [-88+bp]
    mov i64 ri [-24+bp]
    call i64 %PageTable_3__next_table
;
;%7 = getelementptr inbounds %?PageTable(3)* %4, i64 0, i32 1
    mov i64 [-96+bp] [-56+bp]
    add i64 [-96+bp] $8
    mov i64 [-104+bp] [-96+bp]
;
;%8 = load i1* %7, align 8
    mov i64 rc [-104+bp]
    mov i8 [-112+bp] [rc]
    mov i64 rb %PageTable_4__next_table_create_Entry
;br i1 %8, label %OptionalNonNull, label %OptionalNull
    cmp i8 [-112+bp] $0
    jne i64 %PageTable_4__next_table_create_OptionalNonNull
    jmp i64 %PageTable_4__next_table_create_OptionalNull
    und 
%PageTable_4__next_table_create_common_ret
    mov i64 rb %PageTable_4__next_table_create_common_ret
;ret void
    jmp i64 %PageTable_4__next_table_create_ret
%PageTable_4__next_table_create_OptionalNull
;
;%tmpcast = bitcast i64* %frame to %Frame*
    mov i64 [-120+bp] [-72+bp]
;
;%9 = tail call @FrameAllocator.alloc(%FrameAllocator* %3)
    mov i64 rg [-32+bp]
    call i64 %FrameAllocator_alloc
    mov i64 [-128+bp] ra
;
;%10 = or i64 %9, i64 1
    mov i64 [-136+bp] [-128+bp]
    or i64 [-136+bp] $1
;
;store i64 %10, i64* %frame, align 8
    mov i64 rc [-72+bp]
    mov i64 [rc] [-136+bp]
;
;%11 = bitcast %PageTable(4)* %1 to [512 x %Frame]**
    mov i64 [-144+bp] [-16+bp]
;
;%12 = load [512 x %Frame]** %11, align 1
    mov i64 rc [-144+bp]
    mov i64 [-152+bp] [rc]
;
;%13 = getelementptr inbounds [512 x %Frame]* %12, i64 0, i64 %2, i32 0
    mov i64 [-160+bp] [-152+bp]
    mov i64 rc [-24+bp]
    mul i64 rc $8
    add i64 [-160+bp] rc
    mov i64 [-168+bp] [-160+bp]
;
;store i64 %10, i64* %13, align 1
    mov i64 rc [-168+bp]
    mov i64 [rc] [-136+bp]
;
;%14 = bitcast %PageTable(3)* %0 to %PageTable(1)*
    mov i64 [-176+bp] [-8+bp]
;
;call @PageTable(1).init(%PageTable(1)* %14, %Frame* %tmpcast)
    mov i64 rg [-176+bp]
    mov i64 rh [-120+bp]
    call i64 %PageTable_1__init
    mov i64 rb %PageTable_4__next_table_create_OptionalNull
;br label %common.ret
    jmp i64 %PageTable_4__next_table_create_common_ret
%PageTable_4__next_table_create_OptionalNonNull
;
;%15 = bitcast %?PageTable(3)* %4 to i64*
    mov i64 [-184+bp] [-56+bp]
;
;%16 = bitcast %PageTable(3)* %0 to i64*
    mov i64 [-192+bp] [-8+bp]
;
;%17 = load i64* %15, align 8
    mov i64 rc [-184+bp]
    mov i64 [-200+bp] [rc]
;
;store i64 %17, i64* %16, align 1
    mov i64 rc [-192+bp]
    mov i64 [rc] [-200+bp]
    mov i64 rb %PageTable_4__next_table_create_OptionalNonNull
;br label %common.ret
    jmp i64 %PageTable_4__next_table_create_common_ret
%PageTable_4__next_table_create_ret
    mov i64 sp bp
    pop i64 bp
    ret 

%setup_paging
    push i64 bp
    mov i64 bp sp
    sub i64 sp $152
    mov i64 [-8+bp] rg
    mov i64 [-16+bp] rh
    mov i64 [-24+bp] ri
    jmp i64 %setup_paging_Entry
%setup_paging_Entry
;
;%pt = alloca i64, align 8
    mov i64 [-40+bp] bp
    sub i64 [-40+bp] $32
;
;%3 = alloca %VirtAddr, align 8
    mov i64 [-56+bp] bp
    sub i64 [-56+bp] $48
;
;%4 = alloca %Frame, align 8
    mov i64 [-72+bp] bp
    sub i64 [-72+bp] $64
;
;%5 = bitcast i64* %pt to %PageTable(1)*
    mov i64 [-80+bp] [-40+bp]
;
;call @PageTable(1).init(%PageTable(1)* %5, %Frame* %1)
    mov i64 rg [-80+bp]
    mov i64 rh [-16+bp]
    call i64 %PageTable_1__init
    mov i64 rb %setup_paging_Entry
;br label %WhileCond
    jmp i64 %setup_paging_WhileCond
%setup_paging_WhileCond
;
;%frame.0 = phi i64 [ i64 4096, %Entry ], [ i64 %11, %WhileBody ]
    cmp i64 rb %setup_paging_Entry
    jeq i64 %setup_paging_phi_10000008_Entry
    cmp i64 rb %setup_paging_WhileBody
    jeq i64 %setup_paging_phi_10000010_WhileBody
    und 
%setup_paging_phi_10000008_Entry
    mov i64 [-88+bp] $4096
    jmp i64 %setup_paging_phi_10000007_end
%setup_paging_phi_10000010_WhileBody
    mov i64 [-88+bp] [-96+bp]
    jmp i64 %setup_paging_phi_10000007_end
%setup_paging_phi_10000007_end
;
;%6 = icmp ult i64 %frame.0, i64 4194304
    cmp i64 [-88+bp] $4194304
    jlt i64 %setup_paging_cmp_jlt_10000012_true
    jmp i64 %setup_paging_cmp_jlt_10000012_false
%setup_paging_cmp_jlt_10000012_true
    mov i8 [-104+bp] r1
    jmp i64 %setup_paging_cmp_jlt_10000012_end
%setup_paging_cmp_jlt_10000012_false
    mov i8 [-104+bp] r0
    jmp i64 %setup_paging_cmp_jlt_10000012_end
%setup_paging_cmp_jlt_10000012_end
    mov i64 rb %setup_paging_WhileCond
;br i1 %6, label %WhileBody, label %WhileEnd
    cmp i8 [-104+bp] $0
    jne i64 %setup_paging_WhileBody
    jmp i64 %setup_paging_WhileEnd
    und 
%setup_paging_WhileBody
;
;%7 = bitcast %Frame* %4 to i64*
    mov i64 [-112+bp] [-72+bp]
;
;%8 = bitcast %VirtAddr* %3 to i64*
    mov i64 [-120+bp] [-56+bp]
;
;%9 = bitcast i64* %pt to %PageTable(4)*
    mov i64 [-128+bp] [-40+bp]
;
;%10 = or i64 %frame.0, i64 33554432
    mov i64 [-136+bp] [-88+bp]
    or i64 [-136+bp] $33554432
;
;store i64 %10, i64* %8, align 8
    mov i64 rc [-120+bp]
    mov i64 [rc] [-136+bp]
;
;store i64 %frame.0, i64* %7, align 8
    mov i64 rc [-112+bp]
    mov i64 [rc] [-88+bp]
;
;call @map_to(%PageTable(4)* %9, %VirtAddr* %3, %Frame* %4, %FrameAllocator* %2)
    mov i64 rg [-128+bp]
    mov i64 rh [-56+bp]
    mov i64 ri [-72+bp]
    mov i64 rj [-24+bp]
    call i64 %map_to
;
;%11 = add i64 %frame.0, i64 4096
    mov i64 [-96+bp] [-88+bp]
    add i64 [-96+bp] $4096
    mov i64 rb %setup_paging_WhileBody
;br label %WhileCond
    jmp i64 %setup_paging_WhileCond
%setup_paging_WhileEnd
;
;%12 = bitcast %PageTable(4)* %0 to i64*
    mov i64 [-144+bp] [-8+bp]
;
;%13 = load i64* %pt, align 8
    mov i64 rc [-40+bp]
    mov i64 [-152+bp] [rc]
;
;store i64 %13, i64* %12, align 1
    mov i64 rc [-144+bp]
    mov i64 [rc] [-152+bp]
    mov i64 rb %setup_paging_WhileEnd
;ret void
    jmp i64 %setup_paging_ret
%setup_paging_ret
    mov i64 sp bp
    pop i64 bp
    ret 

%PageTable_2__next_table_create
    push i64 bp
    mov i64 bp sp
    sub i64 sp $176
    mov i64 [-8+bp] rg
    mov i64 [-16+bp] rh
    mov i64 [-24+bp] ri
    mov i64 [-32+bp] rj
    jmp i64 %PageTable_2__next_table_create_Entry
%PageTable_2__next_table_create_Entry
;
;%4 = alloca %?PageTable(1), align 8
    mov i64 [-56+bp] bp
    sub i64 [-56+bp] $48
;
;%frame = alloca i64, align 8
    mov i64 [-72+bp] bp
    sub i64 [-72+bp] $64
;
;call @PageTable(2).next_table(%?PageTable(1)* %4, %PageTable(2)* %1, i64 %2)
    mov i64 rg [-56+bp]
    mov i64 rh [-16+bp]
    mov i64 ri [-24+bp]
    call i64 %PageTable_2__next_table
;
;%5 = getelementptr inbounds %?PageTable(1)* %4, i64 0, i32 1
    mov i64 [-80+bp] [-56+bp]
    add i64 [-80+bp] $8
    mov i64 [-88+bp] [-80+bp]
;
;%6 = load i1* %5, align 8
    mov i64 rc [-88+bp]
    mov i8 [-96+bp] [rc]
    mov i64 rb %PageTable_2__next_table_create_Entry
;br i1 %6, label %OptionalNonNull, label %OptionalNull
    cmp i8 [-96+bp] $0
    jne i64 %PageTable_2__next_table_create_OptionalNonNull
    jmp i64 %PageTable_2__next_table_create_OptionalNull
    und 
%PageTable_2__next_table_create_common_ret
    mov i64 rb %PageTable_2__next_table_create_common_ret
;ret void
    jmp i64 %PageTable_2__next_table_create_ret
%PageTable_2__next_table_create_OptionalNull
;
;%tmpcast = bitcast i64* %frame to %Frame*
    mov i64 [-104+bp] [-72+bp]
;
;%7 = tail call @FrameAllocator.alloc(%FrameAllocator* %3)
    mov i64 rg [-32+bp]
    call i64 %FrameAllocator_alloc
    mov i64 [-112+bp] ra
;
;%8 = or i64 %7, i64 1
    mov i64 [-120+bp] [-112+bp]
    or i64 [-120+bp] $1
;
;store i64 %8, i64* %frame, align 8
    mov i64 rc [-72+bp]
    mov i64 [rc] [-120+bp]
;
;%9 = bitcast %PageTable(2)* %1 to [512 x %Frame]**
    mov i64 [-128+bp] [-16+bp]
;
;%10 = load [512 x %Frame]** %9, align 1
    mov i64 rc [-128+bp]
    mov i64 [-136+bp] [rc]
;
;%11 = getelementptr inbounds [512 x %Frame]* %10, i64 0, i64 %2, i32 0
    mov i64 [-144+bp] [-136+bp]
    mov i64 rc [-24+bp]
    mul i64 rc $8
    add i64 [-144+bp] rc
    mov i64 [-152+bp] [-144+bp]
;
;store i64 %8, i64* %11, align 1
    mov i64 rc [-152+bp]
    mov i64 [rc] [-120+bp]
;
;call @PageTable(1).init(%PageTable(1)* %0, %Frame* %tmpcast)
    mov i64 rg [-8+bp]
    mov i64 rh [-104+bp]
    call i64 %PageTable_1__init
    mov i64 rb %PageTable_2__next_table_create_OptionalNull
;br label %common.ret
    jmp i64 %PageTable_2__next_table_create_common_ret
%PageTable_2__next_table_create_OptionalNonNull
;
;%12 = bitcast %?PageTable(1)* %4 to i64*
    mov i64 [-160+bp] [-56+bp]
;
;%13 = bitcast %PageTable(1)* %0 to i64*
    mov i64 [-168+bp] [-8+bp]
;
;%14 = load i64* %12, align 8
    mov i64 rc [-160+bp]
    mov i64 [-176+bp] [rc]
;
;store i64 %14, i64* %13, align 1
    mov i64 rc [-168+bp]
    mov i64 [rc] [-176+bp]
    mov i64 rb %PageTable_2__next_table_create_OptionalNonNull
;br label %common.ret
    jmp i64 %PageTable_2__next_table_create_common_ret
%PageTable_2__next_table_create_ret
    mov i64 sp bp
    pop i64 bp
    ret 

%PageTable_2__next_table
    push i64 bp
    mov i64 bp sp
    sub i64 sp $120
    mov i64 [-8+bp] rg
    mov i64 [-16+bp] rh
    mov i64 [-24+bp] ri
    jmp i64 %PageTable_2__next_table_Entry
%PageTable_2__next_table_Entry
;
;%3 = bitcast %PageTable(2)* %1 to [512 x %Frame]**
    mov i64 [-32+bp] [-16+bp]
;
;%4 = load [512 x %Frame]** %3, align 1
    mov i64 rc [-32+bp]
    mov i64 [-40+bp] [rc]
;
;%5 = getelementptr inbounds [512 x %Frame]* %4, i64 0, i64 %2
    mov i64 [-48+bp] [-40+bp]
    mov i64 rc [-24+bp]
    mul i64 rc $8
    add i64 [-48+bp] rc
    mov i64 [-56+bp] [-48+bp]
;
;%6 = bitcast %Frame* %5 to i64*
    mov i64 [-64+bp] [-56+bp]
;
;%7 = load i64* %6, align 1
    mov i64 rc [-64+bp]
    mov i64 [-72+bp] [rc]
;
;%8 = and i64 %7, i64 1
    mov i64 [-80+bp] [-72+bp]
    and i64 [-80+bp] $1
;
;%.not = icmp eq i64 %8, i64 0
    cmp i64 [-80+bp] $0
    jeq i64 %PageTable_2__next_table_cmp_jeq_10000007_true
    jmp i64 %PageTable_2__next_table_cmp_jeq_10000007_false
%PageTable_2__next_table_cmp_jeq_10000007_true
    mov i8 [-88+bp] r1
    jmp i64 %PageTable_2__next_table_cmp_jeq_10000007_end
%PageTable_2__next_table_cmp_jeq_10000007_false
    mov i8 [-88+bp] r0
    jmp i64 %PageTable_2__next_table_cmp_jeq_10000007_end
%PageTable_2__next_table_cmp_jeq_10000007_end
    mov i64 rb %PageTable_2__next_table_Entry
;br i1 %.not, label %Else, label %Then
    cmp i8 [-88+bp] $0
    jne i64 %PageTable_2__next_table_Else
    jmp i64 %PageTable_2__next_table_Then
    und 
%PageTable_2__next_table_common_ret
    mov i64 rb %PageTable_2__next_table_common_ret
;ret void
    jmp i64 %PageTable_2__next_table_ret
%PageTable_2__next_table_Then
;
;%9 = getelementptr inbounds %?PageTable(1)* %0, i64 0, i32 1
    mov i64 [-96+bp] [-8+bp]
    add i64 [-96+bp] $8
    mov i64 [-104+bp] [-96+bp]
;
;store i1 true, i1* %9, align 1
    mov i64 rc [-104+bp]
    mov i8 [rc] $1
;
;%10 = bitcast %?PageTable(1)* %0 to %PageTable(1)*
    mov i64 [-112+bp] [-8+bp]
;
;tail call @PageTable(1).init(%PageTable(1)* %10, %Frame* %5)
    mov i64 rg [-112+bp]
    mov i64 rh [-56+bp]
    call i64 %PageTable_1__init
;
;store i1 true, i1* %9, align 1
    mov i64 rc [-104+bp]
    mov i8 [rc] $1
    mov i64 rb %PageTable_2__next_table_Then
;br label %common.ret
    jmp i64 %PageTable_2__next_table_common_ret
%PageTable_2__next_table_Else
;
;%11 = bitcast %?PageTable(1)* %0 to i8*
    mov i64 [-120+bp] [-8+bp]
;
;call @llvm.memset.p0i8.i64(i8* %11, i8 0, i64 9, i1 false)
    mov i64 rg [-120+bp]
    mov i8 rh $0
    mov i64 ri $9
    mov i8 rj $0
    call i64 %llvm_memset_p0i8_i64
    mov i64 rb %PageTable_2__next_table_Else
;br label %common.ret
    jmp i64 %PageTable_2__next_table_common_ret
%PageTable_2__next_table_ret
    mov i64 sp bp
    pop i64 bp
    ret 

