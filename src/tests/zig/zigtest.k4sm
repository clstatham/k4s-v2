@global_0 align8 "\x50\x68\x79\x73\x69\x63\x61\x6c\x20\x6d\x65\x6d\x6f\x72\x79\x20\x73\x69\x7a\x65\x20\x69\x73\x3a\x00"
@global_1 align8 resb 0
@global_1_elem0 align8 (0+@global_0)
@global_1_elem1 align8 $24
%println
    push i64 bp
    mov i64 bp sp
    sub i64 sp $104
    mov i64 [-8+bp] rg
    jmp i64 %println_Entry
%println_Entry
;
;call @llvm.dbg.declare(<metadata>, <metadata>, <metadata>) (with debugloc)
    call i64 %llvm_dbg_declare
;
;call @llvm.dbg.value(<metadata>, <metadata>, <metadata>) (with debugloc)
    call i64 %llvm_dbg_value
;
;%1 = getelementptr inbounds %[]u8* %0, i64 0, i32 1 (with debugloc)
    mov i64 [-16+bp] [-8+bp]
    add i64 [-16+bp] $8
    mov i64 [-24+bp] [-16+bp]
;
;%2 = load i64* %1, align 8 (with debugloc)
    mov i64 rc [-24+bp]
    mov i64 [-32+bp] [rc]
;
;call @llvm.dbg.value(<metadata>, <metadata>, <metadata>) (with debugloc)
    call i64 %llvm_dbg_value
;
;%.not = icmp eq i64 %2, i64 0 (with debugloc)
    cmp i64 [-32+bp] $0
    jeq i64 %println_cmp_jeq_10000008_true
    jmp i64 %println_cmp_jeq_10000008_false
%println_cmp_jeq_10000008_true
    mov i8 [-40+bp] $1
    jmp i64 %println_cmp_jeq_10000008_end
%println_cmp_jeq_10000008_false
    mov i8 [-40+bp] $0
    jmp i64 %println_cmp_jeq_10000008_end
%println_cmp_jeq_10000008_end
    mov i64 rb %println_Entry
;br i1 %.not, label %ForEnd, label %ForBody.preheader (with debugloc)
    cmp i8 [-40+bp] $0
    jne i64 %println_ForEnd
    jmp i64 %println_ForBody_preheader
    und 
%println_ForBody_preheader
    mov i64 rb %println_ForBody_preheader
;br label %ForBody (with debugloc)
    jmp i64 %println_ForBody
%println_ForBody
;
;%i.01 = phi i64 [ i64 %6, %ForBody ], [ i64 0, %ForBody.preheader ]
    cmp i64 rb %println_ForBody
    jeq i64 %println_phi_10000010_ForBody
    cmp i64 rb %println_ForBody_preheader
    jeq i64 %println_phi_10000011_ForBody_preheader
    und 
%println_phi_10000010_ForBody
    mov i64 [-48+bp] [-56+bp]
    jmp i64 %println_phi_10000009_end
%println_phi_10000011_ForBody_preheader
    mov i64 [-48+bp] $0
    jmp i64 %println_phi_10000009_end
%println_phi_10000009_end
;
;%3 = bitcast %[]u8* %0 to i8**
    mov i64 [-64+bp] [-8+bp]
;
;call @llvm.dbg.value(<metadata>, <metadata>, <metadata>) (with debugloc)
    call i64 %llvm_dbg_value
;
;%4 = load i8** %3, align 8 (with debugloc)
    mov i64 rc [-64+bp]
    mov i64 [-72+bp] [rc]
;
;%scevgep = getelementptr i8* %4, i64 %i.01 (with debugloc)
    mov i64 [-80+bp] [-72+bp]
    mov i64 rc [-48+bp]
    mul i64 rc $1
    add i64 [-80+bp] rc
    mov i64 [-88+bp] [-80+bp]
;
;%5 = load i8* %scevgep, align 1 (with debugloc)
    mov i64 rc [-88+bp]
    mov i8 [-96+bp] [rc]
;
;call @llvm.dbg.value(<metadata>, <metadata>, <metadata>) (with debugloc)
    call i64 %llvm_dbg_value
;
;tail call @printc(i8 %5) (with debugloc)
    mov i8 rg [-96+bp]
    call i64 %printc
;
;%6 = add i64 %i.01, i64 1 (with debugloc)
    mov i64 [-56+bp] [-48+bp]
    add i64 [-56+bp] $1
;
;call @llvm.dbg.value(<metadata>, <metadata>, <metadata>) (with debugloc)
    call i64 %llvm_dbg_value
;
;%exitcond.not = icmp eq i64 %2, i64 %6 (with debugloc)
    cmp i64 [-32+bp] [-56+bp]
    jeq i64 %println_cmp_jeq_10000019_true
    jmp i64 %println_cmp_jeq_10000019_false
%println_cmp_jeq_10000019_true
    mov i8 [-104+bp] $1
    jmp i64 %println_cmp_jeq_10000019_end
%println_cmp_jeq_10000019_false
    mov i8 [-104+bp] $0
    jmp i64 %println_cmp_jeq_10000019_end
%println_cmp_jeq_10000019_end
    mov i64 rb %println_ForBody
;br i1 %exitcond.not, label %ForEnd, label %ForBody (with debugloc)
    cmp i8 [-104+bp] $0
    jne i64 %println_ForEnd
    jmp i64 %println_ForBody
    und 
%println_ForEnd
;
;tail call @printc(i8 10) (with debugloc)
    mov i8 rg $10
    call i64 %printc
    mov i64 rb %println_ForEnd
;ret void (with debugloc)
    jmp i64 %println_ret
%println_ret
    mov i64 sp bp
    pop i64 bp
    ret 

%kernel_main
    push i64 bp
    mov i64 bp sp
    sub i64 sp $8
    mov i64 [-8+bp] rg
    jmp i64 %kernel_main_Entry
%kernel_main_Entry
;
;call @llvm.dbg.value(<metadata>, <metadata>, <metadata>) (with debugloc)
    call i64 %llvm_dbg_value
;
;tail call @println(%[]u8* @global_1) (with debugloc)
    mov i64 rg @global_1
    call i64 %println
;
;tail call @printi(i64 %0) (with debugloc)
    mov i64 rg [-8+bp]
    call i64 %printi
;
;tail call @hlt() (with debugloc)
    call i64 %hlt
    mov i64 rb %kernel_main_Entry
;unreachable (with debugloc)
    und 
%kernel_main_ret
    mov i64 sp bp
    pop i64 bp
    ret 

